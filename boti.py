#!/usr/bin/env python3
# boti.py - 🤖 ShytoshiBot الإصدار الموحد بعد التعديلات التلقائية

import os
import json
import random
import subprocess
import requests
from datetime import datetime

# ===== إعدادات حساسة =====
BOT_NAME = "momo"
GITHUB_REPO = "https://github.com/public36/botio.git"
NETLIFY_BUILD_HOOK = "https://api.netlify.com/build_hooks/6887ae6d1960c1aff4e4d209"  # ✅ hook محدث
TELEGRAM_BOT_TOKEN = "7081826639:AAEGWibR9Qq-o3wKoWw4MZ5zMBGHUxuHISg"
TELEGRAM_CHAT_ID = "5326702321"
SSH_KEY_PATH = "/data/data/com.termux/files/home/.ssh/id_ed25519"
PROJECT_DIR = "/sdcard/zuku"
REPO_DIR = os.path.join(PROJECT_DIR, "botio")
LOG_FILE = os.path.join(REPO_DIR, "log.txt")

# ===== وظائف مساعدة =====
def log(msg):
    now = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    print(f"{BOT_NAME} | {msg}")
    os.makedirs(os.path.dirname(LOG_FILE), exist_ok=True)
    with open(LOG_FILE, "a", encoding="utf-8") as f:
        f.write(f"{now} - {msg}\n")

def send_telegram(msg):
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        payload = {"chat_id": TELEGRAM_CHAT_ID, "text": msg}
        requests.post(url, json=payload)
    except Exception as e:
        log(f"❌ Telegram error: {e}")

def generate_ssh_key():
    if os.path.exists(SSH_KEY_PATH):
        return
    log("🔐 توليد مفتاح SSH جديد ...")
    os.system("bash ssh.sh")

def clone_repo():
    if not os.path.exists(PROJECT_DIR):
        os.makedirs(PROJECT_DIR)
    os.chdir(PROJECT_DIR)
    
    if not os.path.exists(os.path.join(REPO_DIR, ".git")):
        subprocess.run(["git", "clone", GITHUB_REPO])
        log("✅ تم استنساخ المشروع.")
        send_telegram("📥 تم استنساخ botio من GitHub.")
    else:
        log("📁 المشروع موجود مسبقاً. تخطيت الاستنساخ.")

def update_products():
    prod_path = os.path.join(REPO_DIR, "products.json")
    if not os.path.exists(prod_path):
        log("❌ ملف المنتجات غير موجود.")
        return "unknown-product"

    try:
        with open(prod_path, "r", encoding="utf-8") as f:
            products = json.load(f)
    except:
        products = []

    new_product = {
        "id": len(products) + 1,
        "name": f"AI Product {random.randint(1000, 9999)}",
        "price": f"{random.randint(10, 99)}€",
        "description": "Generated by ShytoshiBot.",
        "image": f"https://picsum.photos/300?random={random.randint(1,9999)}"
    }
    products.append(new_product)

    with open(prod_path, "w", encoding="utf-8") as f:
        json.dump(products, f, indent=2, ensure_ascii=False)

    log(f"🆕 Product added: {new_product['name']}")
    return new_product['name']

def configure_git_safe_dir():
    subprocess.run(["git", "config", "--global", "--add", "safe.directory", REPO_DIR])

def push_to_github():
    if not os.path.exists(os.path.join(REPO_DIR, ".git")):
        log("❌ مجلد Git غير موجود.")
        return

    os.chdir(REPO_DIR)
    os.environ["GIT_SSH_COMMAND"] = f"ssh -i {SSH_KEY_PATH}"
    configure_git_safe_dir()

    subprocess.run(["git", "config", "user.email", "mbomadian23@gmail.com"])
    subprocess.run(["git", "config", "user.name", BOT_NAME])

    # سحب التحديثات من GitHub
    pull = subprocess.run(["git", "pull", "--rebase", "origin", "main"],
                          capture_output=True, text=True)
    log(f"[Git Pull] {pull.stdout.strip()}")

    subprocess.run(["git", "add", "."], check=True)

    commit = subprocess.run(["git", "commit", "-m", f"{BOT_NAME} update {datetime.now().isoformat()}"],
                            capture_output=True, text=True)

    if "nothing to commit" in commit.stdout.lower():
        log("📭 لا تغييرات حالياً. لا داعي لـ push.")
        return

    try:
        push = subprocess.run(["git", "push", "origin", "main"],
                              capture_output=True, text=True, check=True)
        log("✅ Changes pushed to GitHub.")
        send_telegram("📤 التحديثات نُشرت إلى GitHub.")
    except subprocess.CalledProcessError as e:
        log(f"❌ Push failed:\n{e.stderr}")
        send_telegram(f"❌ فشل push إلى GitHub:\n{e.stderr}")

def trigger_netlify():
    try:
        log(f"🌐 Triggering Netlify build: {NETLIFY_BUILD_HOOK}")
        res = requests.post(NETLIFY_BUILD_HOOK)
        if res.status_code == 200:
            log("✅ Netlify build triggered.")
            send_telegram("🚀 Build جديد شغال على Netlify.")
        else:
            log(f"⚠️ Netlify trigger failed: {res.status_code}")
            send_telegram(f"⚠️ فشل تشغيل Netlify: {res.status_code}")
    except Exception as e:
        log(f"❌ Netlify error: {str(e)}")
        send_telegram(f"❌ خطأ في اتصال Netlify:\n{e}")

def main():
    log("\n🚀 Starting full update and deployment...\n")
    generate_ssh_key()
    clone_repo()
    product_name = update_products()
    push_to_github()
    trigger_netlify()
    send_telegram(f"✅ All tasks completed.\n🆕 Product: {product_name}")
    log("✅ All tasks completed.\n")

if __name__ == "__main__":
    main()
